{
  "resourceType": "Bundle",
  "id": "library-deps-EXM105-FHIR4-8.1.000-bundle",
  "type": "transaction",
  "entry": [
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-SupplementalDataElements-FHIR4-1.0.0",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-SupplementalDataElements-FHIR4-1.0.0</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/library-FHIRHelpers-4.0.0</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.3591</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library SupplementalDataElements_FHIR4 version '1.0.0'\n\nusing FHIR version '4.0.0'\n\ninclude FHIRHelpers version '4.0.0' called FHIRHelpers\n\nvalueset \"ONC Administrative Sex\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1'\nvalueset \"Race\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.836'\nvalueset \"Ethnicity\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.837'\nvalueset \"Payer\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.3591'\n\ncontext Patient\n\ndefine \"SDE Ethnicity\":\n  (flatten (\n    Patient.extension Extension\n      where Extension.url = 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity'\n        return Extension.extension\n  )) E\n    where E.url = 'ombCategory'\n      or E.url = 'detailed'\n    return E.value as Coding\n    \ndefine \"SDE Payer\":\n    [Coverage: type in \"Payer\"] Payer\n      return {\n        code: Payer.type,\n        period: Payer.period\n      }\n      \ndefine \"SDE Race\":\n  (flatten (\n    Patient.extension Extension\n      where Extension.url = 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race'\n        return Extension.extension\n  )) E\n    where E.url = 'ombCategory'\n      or E.url = 'detailed'\n    return E.value as Coding\n\ndefine \"SDE Sex\":\n  case \n    when Patient.gender = 'male' then Code { code: 'M', system: 'http://hl7.org/fhir/v3/AdministrativeGender', display: 'Male' }\n    when Patient.gender = 'female' then Code { code: 'F', system: 'http://hl7.org/fhir/v3/AdministrativeGender', display: 'Female' }\n    else null\n  end\n\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "version": "1.0.0",
        "name": "SupplementalDataElements_FHIR4",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://hl7.org/fhir/codesystem-library-type.html",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "Library/library-FHIRHelpers-4.0.0"
          }
        ],
        "dataRequirement": [
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.114222.4.11.3591"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBTdXBwbGVtZW50YWxEYXRhRWxlbWVudHNfRkhJUjQgdmVyc2lvbiAnMS4wLjAnCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4wJwoKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMCcgY2FsbGVkIEZISVJIZWxwZXJzCgp2YWx1ZXNldCAiT05DIEFkbWluaXN0cmF0aXZlIFNleCI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM3NjIuMS40LjEnCnZhbHVlc2V0ICJSYWNlIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExNDIyMi40LjExLjgzNicKdmFsdWVzZXQgIkV0aG5pY2l0eSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTQyMjIuNC4xMS44MzcnCnZhbHVlc2V0ICJQYXllciI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTQyMjIuNC4xMS4zNTkxJwoKY29udGV4dCBQYXRpZW50CgpkZWZpbmUgIlNERSBFdGhuaWNpdHkiOgogIChmbGF0dGVuICgKICAgIFBhdGllbnQuZXh0ZW5zaW9uIEV4dGVuc2lvbgogICAgICB3aGVyZSBFeHRlbnNpb24udXJsID0gJ2h0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLWNvcmUtZXRobmljaXR5JwogICAgICAgIHJldHVybiBFeHRlbnNpb24uZXh0ZW5zaW9uCiAgKSkgRQogICAgd2hlcmUgRS51cmwgPSAnb21iQ2F0ZWdvcnknCiAgICAgIG9yIEUudXJsID0gJ2RldGFpbGVkJwogICAgcmV0dXJuIEUudmFsdWUgYXMgQ29kaW5nCiAgICAKZGVmaW5lICJTREUgUGF5ZXIiOgogICAgW0NvdmVyYWdlOiB0eXBlIGluICJQYXllciJdIFBheWVyCiAgICAgIHJldHVybiB7CiAgICAgICAgY29kZTogUGF5ZXIudHlwZSwKICAgICAgICBwZXJpb2Q6IFBheWVyLnBlcmlvZAogICAgICB9CiAgICAgIApkZWZpbmUgIlNERSBSYWNlIjoKICAoZmxhdHRlbiAoCiAgICBQYXRpZW50LmV4dGVuc2lvbiBFeHRlbnNpb24KICAgICAgd2hlcmUgRXh0ZW5zaW9uLnVybCA9ICdodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1jb3JlLXJhY2UnCiAgICAgICAgcmV0dXJuIEV4dGVuc2lvbi5leHRlbnNpb24KICApKSBFCiAgICB3aGVyZSBFLnVybCA9ICdvbWJDYXRlZ29yeScKICAgICAgb3IgRS51cmwgPSAnZGV0YWlsZWQnCiAgICByZXR1cm4gRS52YWx1ZSBhcyBDb2RpbmcKCmRlZmluZSAiU0RFIFNleCI6CiAgY2FzZSAKICAgIHdoZW4gUGF0aWVudC5nZW5kZXIgPSAnbWFsZScgdGhlbiBDb2RlIHsgY29kZTogJ00nLCBzeXN0ZW06ICdodHRwOi8vaGw3Lm9yZy9maGlyL3YzL0FkbWluaXN0cmF0aXZlR2VuZGVyJywgZGlzcGxheTogJ01hbGUnIH0KICAgIHdoZW4gUGF0aWVudC5nZW5kZXIgPSAnZmVtYWxlJyB0aGVuIENvZGUgeyBjb2RlOiAnRicsIHN5c3RlbTogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWRtaW5pc3RyYXRpdmVHZW5kZXInLCBkaXNwbGF5OiAnRmVtYWxlJyB9CiAgICBlbHNlIG51bGwKICBlbmQKCg=="
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/library-SupplementalDataElements-FHIR4-1.0.0"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-TJCOverall-FHIR4-4.0.000",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-TJCOverall-FHIR4-4.0.000</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">4.0.000</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/library-FHIRHelpers-4.0.0</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/library-MATGlobalCommonFunctions-FHIR4-4.0.000</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/library-SupplementalDataElements-FHIR4-1.0.0</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"4\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Patient</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>ServiceRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library TJCOverall_FHIR4 version '4.0.000'\n\nusing FHIR version '4.0.0'\n// NOTE: BTR 2019-07-30: Updated version dependencies\ninclude FHIRHelpers version '4.0.0' called FHIRHelpers\ninclude MATGlobalCommonFunctions_FHIR4 version '4.0.000' called Global\ninclude SupplementalDataElements_FHIR4 version '1.0.0' called SDE\n\ncodesystem \"SNOMEDCT\": 'http://snomed.info/sct/731000124108'\ncodesystem \"LOINC\": 'http://loinc.org'\n\nvalueset \"Comfort Measures\": 'http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45'\nvalueset \"Discharge To Acute Care Facility\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.87'\nvalueset \"Discharged to Health Care Facility for Hospice Care\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.207'\nvalueset \"Discharged to Home for Hospice Care\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.209'\nvalueset \"Emergency Department Visit\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292'\nvalueset \"Encounter Inpatient\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307'\nvalueset \"Hemorrhagic Stroke\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.212'\nvalueset \"Ischemic Stroke\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.247'\nvalueset \"Left Against Medical Advice\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.308'\nvalueset \"Non-Elective Inpatient Encounter\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424'\nvalueset \"Patient Expired\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.309'\nvalueset \"Ticagrelor Therapy\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.39'\nvalueset \"Observation Services\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143'\n\ncode \"Birth date\": '21112-8' from \"LOINC\" display 'Birth date'\n\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n  default Interval[@2019-01-01T00:00:00.0, @2020-01-01T00:00:00.0)\n\ncontext Patient\n\ndefine \"Non Elective Inpatient Encounter\":\n\t[\"Encounter\": \"Non-Elective Inpatient Encounter\"] NonElectiveEncounter\n\t\twhere Global.\"LengthInDays\"(NonElectiveEncounter.period) &lt;= 120\n\t\t\tand NonElectiveEncounter.period ends during \"Measurement Period\"\n\ndefine \"All Stroke Encounter\":\n\t\"Non Elective Inpatient Encounter\" NonElectiveEncounter\n    where Global.PrincipalDiagnosis(NonElectiveEncounter).code in \"Hemorrhagic Stroke\"\n      or Global.PrincipalDiagnosis(NonElectiveEncounter).code in \"Ischemic Stroke\"\n\ndefine \"Encounter with Principal Diagnosis and Age\":\n\t\"All Stroke Encounter\" AllStrokeEncounter\n\t\twith [\"Patient\"] BirthDate\n\t\t\tsuch that Global.\"CalendarAgeInYearsAt\"(\n        FHIRHelpers.ToDate(BirthDate.birthDate),\n        start of FHIRHelpers.ToInterval(AllStrokeEncounter.period)\n      ) &gt;= 18\n\ndefine \"Ischemic Stroke Encounter\":\n\t\"Encounter with Principal Diagnosis and Age\" EncounterWithAge\n\t\twhere Global.PrincipalDiagnosis(EncounterWithAge).code in \"Ischemic Stroke\"\n\ndefine \"Ischemic Stroke Encounters with Discharge Disposition\":\n\t\"Ischemic Stroke Encounter\" IschemicStrokeEncounter\n\t\t\twhere IschemicStrokeEncounter.hospitalization.dischargeDisposition in \"Discharge To Acute Care Facility\"\n\t\t\t\tor IschemicStrokeEncounter.hospitalization.dischargeDisposition in \"Left Against Medical Advice\"\n\t\t\t\tor IschemicStrokeEncounter.hospitalization.dischargeDisposition in \"Patient Expired\"\n\t\t\t\tor IschemicStrokeEncounter.hospitalization.dischargeDisposition in \"Discharged to Home for Hospice Care\"\n\t\t\t\tor IschemicStrokeEncounter.hospitalization.dischargeDisposition in \"Discharged to Health Care Facility for Hospice Care\"\n\n//Changed \"ProcedureRequest\" to \"ServiceRequest\"\ndefine \"Intervention Comfort Measure Dates\":\n\t(\n    [\"ServiceRequest\": \"Comfort Measures\"] P\n\t\t  where P.intent = 'order'\n      return P.authoredOn\n  ) union\n\t\t(\n      [\"Procedure\": \"Comfort Measures\"] InterventionPerformed\n\t\t      where InterventionPerformed.status = 'completed'\n          return InterventionPerformed.performed as dateTime\n    )\n\ndefine \"Comfort Measures during Hospitalization\":\n\t\"Ischemic Stroke Encounter\" IschemicStrokeEncounter\n   \twith \"Intervention Comfort Measure Dates\" ComfortMeasureDate\n    \tsuch that ComfortMeasureDate  during day of Global.\"HospitalizationWithObservation\"(IschemicStrokeEncounter)\n\n\ndefine function \"CalendarDayOfOrDayAfter\"(StartValue DateTime ):\n\tInterval(Global.\"ToDate\"(StartValue), Global.\"ToDate\"(StartValue + 2 days))\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "version": "4.0.000",
        "name": "TJCOverall_FHIR4",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://hl7.org/fhir/codesystem-library-type.html",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "Library/library-FHIRHelpers-4.0.0"
          },
          {
            "type": "depends-on",
            "resource": "Library/library-MATGlobalCommonFunctions-FHIR4-4.0.000"
          },
          {
            "type": "depends-on",
            "resource": "Library/library-SupplementalDataElements-FHIR4-1.0.0"
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424"
              }
            ]
          },
          {
            "type": "Patient"
          },
          {
            "type": "ServiceRequest",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBUSkNPdmVyYWxsX0ZISVI0IHZlcnNpb24gJzQuMC4wMDAnCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4wJwovLyBOT1RFOiBCVFIgMjAxOS0wNy0zMDogVXBkYXRlZCB2ZXJzaW9uIGRlcGVuZGVuY2llcwppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4wJyBjYWxsZWQgRkhJUkhlbHBlcnMKaW5jbHVkZSBNQVRHbG9iYWxDb21tb25GdW5jdGlvbnNfRkhJUjQgdmVyc2lvbiAnNC4wLjAwMCcgY2FsbGVkIEdsb2JhbAppbmNsdWRlIFN1cHBsZW1lbnRhbERhdGFFbGVtZW50c19GSElSNCB2ZXJzaW9uICcxLjAuMCcgY2FsbGVkIFNERQoKY29kZXN5c3RlbSAiU05PTUVEQ1QiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdC83MzEwMDAxMjQxMDgnCmNvZGVzeXN0ZW0gIkxPSU5DIjogJ2h0dHA6Ly9sb2luYy5vcmcnCgp2YWx1ZXNldCAiQ29tZm9ydCBNZWFzdXJlcyI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMS4zLjYuMS40LjEuMzM4OTUuMS4zLjAuNDUnCnZhbHVlc2V0ICJEaXNjaGFyZ2UgVG8gQWN1dGUgQ2FyZSBGYWNpbGl0eSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy4xMTcuMS43LjEuODcnCnZhbHVlc2V0ICJEaXNjaGFyZ2VkIHRvIEhlYWx0aCBDYXJlIEZhY2lsaXR5IGZvciBIb3NwaWNlIENhcmUiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuMTE3LjEuNy4xLjIwNycKdmFsdWVzZXQgIkRpc2NoYXJnZWQgdG8gSG9tZSBmb3IgSG9zcGljZSBDYXJlIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yMDknCnZhbHVlc2V0ICJFbWVyZ2VuY3kgRGVwYXJ0bWVudCBWaXNpdCI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy4xMTcuMS43LjEuMjkyJwp2YWx1ZXNldCAiRW5jb3VudGVyIElucGF0aWVudCI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy42NjYuNS4zMDcnCnZhbHVlc2V0ICJIZW1vcnJoYWdpYyBTdHJva2UiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuMTE3LjEuNy4xLjIxMicKdmFsdWVzZXQgIklzY2hlbWljIFN0cm9rZSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy4xMTcuMS43LjEuMjQ3Jwp2YWx1ZXNldCAiTGVmdCBBZ2FpbnN0IE1lZGljYWwgQWR2aWNlIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4zMDgnCnZhbHVlc2V0ICJOb24tRWxlY3RpdmUgSW5wYXRpZW50IEVuY291bnRlciI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy4xMTcuMS43LjEuNDI0Jwp2YWx1ZXNldCAiUGF0aWVudCBFeHBpcmVkIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4zMDknCnZhbHVlc2V0ICJUaWNhZ3JlbG9yIFRoZXJhcHkiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzNzYyLjEuNC4xMTEwLjM5Jwp2YWx1ZXNldCAiT2JzZXJ2YXRpb24gU2VydmljZXMiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzNzYyLjEuNC4xMTExLjE0MycKCmNvZGUgIkJpcnRoIGRhdGUiOiAnMjExMTItOCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ0JpcnRoIGRhdGUnCgpwYXJhbWV0ZXIgIk1lYXN1cmVtZW50IFBlcmlvZCIgSW50ZXJ2YWw8RGF0ZVRpbWU+CiAgZGVmYXVsdCBJbnRlcnZhbFtAMjAxOS0wMS0wMVQwMDowMDowMC4wLCBAMjAyMC0wMS0wMVQwMDowMDowMC4wKQoKY29udGV4dCBQYXRpZW50CgpkZWZpbmUgIk5vbiBFbGVjdGl2ZSBJbnBhdGllbnQgRW5jb3VudGVyIjoKCVsiRW5jb3VudGVyIjogIk5vbi1FbGVjdGl2ZSBJbnBhdGllbnQgRW5jb3VudGVyIl0gTm9uRWxlY3RpdmVFbmNvdW50ZXIKCQl3aGVyZSBHbG9iYWwuIkxlbmd0aEluRGF5cyIoTm9uRWxlY3RpdmVFbmNvdW50ZXIucGVyaW9kKSA8PSAxMjAKCQkJYW5kIE5vbkVsZWN0aXZlRW5jb3VudGVyLnBlcmlvZCBlbmRzIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIgoKZGVmaW5lICJBbGwgU3Ryb2tlIEVuY291bnRlciI6CgkiTm9uIEVsZWN0aXZlIElucGF0aWVudCBFbmNvdW50ZXIiIE5vbkVsZWN0aXZlRW5jb3VudGVyCiAgICB3aGVyZSBHbG9iYWwuUHJpbmNpcGFsRGlhZ25vc2lzKE5vbkVsZWN0aXZlRW5jb3VudGVyKS5jb2RlIGluICJIZW1vcnJoYWdpYyBTdHJva2UiCiAgICAgIG9yIEdsb2JhbC5QcmluY2lwYWxEaWFnbm9zaXMoTm9uRWxlY3RpdmVFbmNvdW50ZXIpLmNvZGUgaW4gIklzY2hlbWljIFN0cm9rZSIKCmRlZmluZSAiRW5jb3VudGVyIHdpdGggUHJpbmNpcGFsIERpYWdub3NpcyBhbmQgQWdlIjoKCSJBbGwgU3Ryb2tlIEVuY291bnRlciIgQWxsU3Ryb2tlRW5jb3VudGVyCgkJd2l0aCBbIlBhdGllbnQiXSBCaXJ0aERhdGUKCQkJc3VjaCB0aGF0IEdsb2JhbC4iQ2FsZW5kYXJBZ2VJblllYXJzQXQiKAogICAgICAgIEZISVJIZWxwZXJzLlRvRGF0ZShCaXJ0aERhdGUuYmlydGhEYXRlKSwKICAgICAgICBzdGFydCBvZiBGSElSSGVscGVycy5Ub0ludGVydmFsKEFsbFN0cm9rZUVuY291bnRlci5wZXJpb2QpCiAgICAgICkgPj0gMTgKCmRlZmluZSAiSXNjaGVtaWMgU3Ryb2tlIEVuY291bnRlciI6CgkiRW5jb3VudGVyIHdpdGggUHJpbmNpcGFsIERpYWdub3NpcyBhbmQgQWdlIiBFbmNvdW50ZXJXaXRoQWdlCgkJd2hlcmUgR2xvYmFsLlByaW5jaXBhbERpYWdub3NpcyhFbmNvdW50ZXJXaXRoQWdlKS5jb2RlIGluICJJc2NoZW1pYyBTdHJva2UiCgpkZWZpbmUgIklzY2hlbWljIFN0cm9rZSBFbmNvdW50ZXJzIHdpdGggRGlzY2hhcmdlIERpc3Bvc2l0aW9uIjoKCSJJc2NoZW1pYyBTdHJva2UgRW5jb3VudGVyIiBJc2NoZW1pY1N0cm9rZUVuY291bnRlcgoJCQl3aGVyZSBJc2NoZW1pY1N0cm9rZUVuY291bnRlci5ob3NwaXRhbGl6YXRpb24uZGlzY2hhcmdlRGlzcG9zaXRpb24gaW4gIkRpc2NoYXJnZSBUbyBBY3V0ZSBDYXJlIEZhY2lsaXR5IgoJCQkJb3IgSXNjaGVtaWNTdHJva2VFbmNvdW50ZXIuaG9zcGl0YWxpemF0aW9uLmRpc2NoYXJnZURpc3Bvc2l0aW9uIGluICJMZWZ0IEFnYWluc3QgTWVkaWNhbCBBZHZpY2UiCgkJCQlvciBJc2NoZW1pY1N0cm9rZUVuY291bnRlci5ob3NwaXRhbGl6YXRpb24uZGlzY2hhcmdlRGlzcG9zaXRpb24gaW4gIlBhdGllbnQgRXhwaXJlZCIKCQkJCW9yIElzY2hlbWljU3Ryb2tlRW5jb3VudGVyLmhvc3BpdGFsaXphdGlvbi5kaXNjaGFyZ2VEaXNwb3NpdGlvbiBpbiAiRGlzY2hhcmdlZCB0byBIb21lIGZvciBIb3NwaWNlIENhcmUiCgkJCQlvciBJc2NoZW1pY1N0cm9rZUVuY291bnRlci5ob3NwaXRhbGl6YXRpb24uZGlzY2hhcmdlRGlzcG9zaXRpb24gaW4gIkRpc2NoYXJnZWQgdG8gSGVhbHRoIENhcmUgRmFjaWxpdHkgZm9yIEhvc3BpY2UgQ2FyZSIKCi8vQ2hhbmdlZCAiUHJvY2VkdXJlUmVxdWVzdCIgdG8gIlNlcnZpY2VSZXF1ZXN0IgpkZWZpbmUgIkludGVydmVudGlvbiBDb21mb3J0IE1lYXN1cmUgRGF0ZXMiOgoJKAogICAgWyJTZXJ2aWNlUmVxdWVzdCI6ICJDb21mb3J0IE1lYXN1cmVzIl0gUAoJCSAgd2hlcmUgUC5pbnRlbnQgPSAnb3JkZXInCiAgICAgIHJldHVybiBQLmF1dGhvcmVkT24KICApIHVuaW9uCgkJKAogICAgICBbIlByb2NlZHVyZSI6ICJDb21mb3J0IE1lYXN1cmVzIl0gSW50ZXJ2ZW50aW9uUGVyZm9ybWVkCgkJICAgICAgd2hlcmUgSW50ZXJ2ZW50aW9uUGVyZm9ybWVkLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICAgICAgICByZXR1cm4gSW50ZXJ2ZW50aW9uUGVyZm9ybWVkLnBlcmZvcm1lZCBhcyBkYXRlVGltZQogICAgKQoKZGVmaW5lICJDb21mb3J0IE1lYXN1cmVzIGR1cmluZyBIb3NwaXRhbGl6YXRpb24iOgoJIklzY2hlbWljIFN0cm9rZSBFbmNvdW50ZXIiIElzY2hlbWljU3Ryb2tlRW5jb3VudGVyCiAgIAl3aXRoICJJbnRlcnZlbnRpb24gQ29tZm9ydCBNZWFzdXJlIERhdGVzIiBDb21mb3J0TWVhc3VyZURhdGUKICAgIAlzdWNoIHRoYXQgQ29tZm9ydE1lYXN1cmVEYXRlICBkdXJpbmcgZGF5IG9mIEdsb2JhbC4iSG9zcGl0YWxpemF0aW9uV2l0aE9ic2VydmF0aW9uIihJc2NoZW1pY1N0cm9rZUVuY291bnRlcikKCgpkZWZpbmUgZnVuY3Rpb24gIkNhbGVuZGFyRGF5T2ZPckRheUFmdGVyIihTdGFydFZhbHVlIERhdGVUaW1lICk6CglJbnRlcnZhbChHbG9iYWwuIlRvRGF0ZSIoU3RhcnRWYWx1ZSksIEdsb2JhbC4iVG9EYXRlIihTdGFydFZhbHVlICsgMiBkYXlzKSkK"
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/library-TJCOverall-FHIR4-4.0.000"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-FHIRHelpers-4.0.0",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-FHIRHelpers-4.0.0</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">4.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library FHIRHelpers version '4.0.0'\n\nusing FHIR version '4.0.0'\n\ndefine function ToInterval(period FHIR.Period):\n    if period is null then\n        null\n    else\n        Interval[period.\"start\".value, period.\"end\".value]\n\ndefine function ToQuantity(quantity FHIR.Quantity):\n    if quantity is null then\n        null\n    else\n        System.Quantity { value: quantity.value.value, unit: quantity.unit.value }\n\ndefine function ToInterval(range FHIR.Range):\n    if range is null then\n        null\n    else\n        Interval[ToQuantity(range.low), ToQuantity(range.high)]\n\ndefine function ToCode(coding FHIR.Coding):\n    if coding is null then\n        null\n    else\n        System.Code {\n          code: coding.code.value,\n          system: coding.system.value,\n          version: coding.version.value,\n          display: coding.display.value\n        }\n\ndefine function ToConcept(concept FHIR.CodeableConcept):\n    if concept is null then\n        null\n    else\n        System.Concept {\n            codes: concept.coding C return ToCode(C),\n            display: concept.text.value\n        }\n\ndefine function ToString(value FHIR.uuid): value.value\ndefine function ToString(value FHIR.TestScriptRequestMethodCode): value.value\ndefine function ToString(value FHIR.SortDirection): value.value\ndefine function ToString(value FHIR.BiologicallyDerivedProductStatus): value.value\ndefine function ToString(value FHIR.UnitsOfTime): value.value\ndefine function ToString(value FHIR.AddressType): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceCategory): value.value\ndefine function ToString(value FHIR.IssueSeverity): value.value\ndefine function ToString(value FHIR.CareTeamStatus): value.value\ndefine function ToString(value FHIR.EncounterStatus): value.value\ndefine function ToString(value FHIR.StructureDefinitionKind): value.value\ndefine function ToString(value FHIR.PublicationStatus): value.value\ndefine function ToString(value FHIR.FHIRVersion): value.value\ndefine function ToString(value FHIR.CarePlanActivityKind): value.value\ndefine function ToString(value FHIR.StructureMapSourceListMode): value.value\ndefine function ToString(value FHIR.RequestStatus): value.value\ndefine function ToString(value FHIR.strandType): value.value\ndefine function ToString(value FHIR.QuestionnaireResponseStatus): value.value\ndefine function ToString(value FHIR.SearchComparator): value.value\ndefine function ToString(value FHIR.ChargeItemStatus): value.value\ndefine function ToString(value FHIR.ActionParticipantType): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceType): value.value\ndefine function ToString(value FHIR.CarePlanActivityStatus): value.value\ndefine function ToString(value FHIR.InvoiceStatus): value.value\ndefine function ToString(value FHIR.ClaimProcessingCodes): value.value\ndefine function ToString(value FHIR.RequestResourceType): value.value\ndefine function ToString(value FHIR.ParticipationStatus): value.value\ndefine function ToString(value FHIR.DeviceNameType): value.value\ndefine function ToString(value FHIR.DocumentMode): value.value\ndefine function ToString(value FHIR.AssertionOperatorType): value.value\ndefine function ToString(value FHIR.DaysOfWeek): value.value\ndefine function ToString(value FHIR.IssueType): value.value\ndefine function ToString(value FHIR.canonical): value.value\ndefine function ToString(value FHIR.StructureMapContextType): value.value\ndefine function ToString(value FHIR.FamilyHistoryStatus): value.value\ndefine function ToString(value FHIR.status): value.value\ndefine function ToString(value FHIR.ExtensionContextType): value.value\ndefine function ToString(value FHIR.AssertionResponseTypes): value.value\ndefine function ToString(value FHIR.RequestIntent): value.value\ndefine function ToString(value FHIR.string): value.value\ndefine function ToString(value FHIR.ActionRequiredBehavior): value.value\ndefine function ToString(value FHIR.GraphCompartmentUse): value.value\ndefine function ToString(value FHIR.orientationType): value.value\ndefine function ToString(value FHIR.AccountStatus): value.value\ndefine function ToString(value FHIR.IdentifierUse): value.value\ndefine function ToString(value FHIR.StructureMapTargetListMode): value.value\ndefine function ToString(value FHIR.ExposureState): value.value\ndefine function ToString(value FHIR.TestReportParticipantType): value.value\ndefine function ToString(value FHIR.BindingStrength): value.value\ndefine function ToString(value FHIR.RequestPriority): value.value\ndefine function ToString(value FHIR.ParticipantRequired): value.value\ndefine function ToString(value FHIR.XPathUsageType): value.value\ndefine function ToString(value FHIR.id): value.value\ndefine function ToString(value FHIR.FilterOperator): value.value\ndefine function ToString(value FHIR.NamingSystemType): value.value\ndefine function ToString(value FHIR.ContractResourceStatusCodes): value.value\ndefine function ToString(value FHIR.ResearchSubjectStatus): value.value\ndefine function ToString(value FHIR.StructureMapTransform): value.value\ndefine function ToString(value FHIR.ResponseType): value.value\ndefine function ToDecimal(value FHIR.decimal): value.value\ndefine function ToString(value FHIR.AggregationMode): value.value\ndefine function ToString(value FHIR.sequenceType): value.value\ndefine function ToString(value FHIR.SystemRestfulInteraction): value.value\ndefine function ToString(value FHIR.AdverseEventActuality): value.value\ndefine function ToString(value FHIR.SubscriptionChannelType): value.value\ndefine function ToString(value FHIR.AssertionDirectionType): value.value\ndefine function ToString(value FHIR.CarePlanIntent): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceCriticality): value.value\ndefine function ToString(value FHIR.PropertyRepresentation): value.value\ndefine function ToString(value FHIR.TriggerType): value.value\ndefine function ToString(value FHIR.CompositionStatus): value.value\ndefine function ToString(value FHIR.AppointmentStatus): value.value\ndefine function ToString(value FHIR.MessageSignificanceCategory): value.value\ndefine function ToString(value FHIR.ListMode): value.value\ndefine function ToString(value FHIR.ResearchElementType): value.value\ndefine function ToString(value FHIR.ObservationStatus): value.value\ndefine function ToString(value FHIR.ResourceType): value.value\ndefine function ToBoolean(value FHIR.boolean): value.value\ndefine function ToString(value FHIR.StructureMapGroupTypeMode): value.value\ndefine function ToString(value FHIR.SupplyRequestStatus): value.value\ndefine function ToString(value FHIR.EncounterLocationStatus): value.value\ndefine function ToString(value FHIR.ConditionalDeleteStatus): value.value\ndefine function ToString(value FHIR.url): value.value\ndefine function ToString(value FHIR.uri): value.value\ndefine function ToString(value FHIR.Use): value.value\ndefine function ToString(value FHIR.medicationRequestStatus): value.value\ndefine function ToString(value FHIR.IdentityAssuranceLevel): value.value\ndefine function ToString(value FHIR.DeviceMetricColor): value.value\ndefine function ToTime(value FHIR.time): value.value\ndefine function ToString(value FHIR.ConditionalReadStatus): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceSeverity): value.value\ndefine function ToString(value FHIR.FinancialResourceStatusCodes): value.value\ndefine function ToString(value FHIR.OperationKind): value.value\ndefine function ToString(value FHIR.SubscriptionStatus): value.value\ndefine function ToString(value FHIR.GoalLifecycleStatus): value.value\ndefine function ToString(value FHIR.ObservationDataType): value.value\ndefine function ToString(value FHIR.DocumentReferenceStatus): value.value\ndefine function ToString(value FHIR.repositoryType): value.value\ndefine function ToString(value FHIR.LocationStatus): value.value\ndefine function ToString(value FHIR.NoteType): value.value\ndefine function ToString(value FHIR.TestReportStatus): value.value\ndefine function ToString(value FHIR.CodeSystemContentMode): value.value\ndefine function ToString(value FHIR.FHIRDeviceStatus): value.value\ndefine function ToString(value FHIR.ContactPointSystem): value.value\ndefine function ToString(value FHIR.SlotStatus): value.value\ndefine function ToString(value FHIR.PropertyType): value.value\ndefine function ToString(value FHIR.TypeDerivationRule): value.value\ndefine function ToString(value FHIR.GuidanceResponseStatus): value.value\ndefine function ToString(value FHIR.RelatedArtifactType): value.value\ndefine function ToString(value FHIR.oid): value.value\ndefine function ToString(value FHIR.CompartmentType): value.value\ndefine function ToString(value FHIR.medicationrequestStatus): value.value\ndefine function ToString(value FHIR.InvoicePriceComponentType): value.value\ndefine function ToString(value FHIR.DeviceMetricCalibrationState): value.value\ndefine function ToString(value FHIR.GroupType): value.value\ndefine function ToString(value FHIR.EnableWhenBehavior): value.value\ndefine function ToString(value FHIR.TaskIntent): value.value\ndefine function ToString(value FHIR.ImmunizationEvaluationStatusCodes): value.value\ndefine function ToString(value FHIR.ExampleScenarioActorType): value.value\ndefine function ToString(value FHIR.ProvenanceEntityRole): value.value\ndefine function ToString(value FHIR.SpecimenStatus): value.value\ndefine function ToString(value FHIR.RestfulCapabilityMode): value.value\ndefine function ToString(value FHIR.DetectedIssueSeverity): value.value\ndefine function ToString(value FHIR.VisionEyes): value.value\ndefine function ToString(value FHIR.ConsentDataMeaning): value.value\ndefine function ToString(value FHIR.messageheaderResponseRequest): value.value\ndefine function ToString(value FHIR.GuidePageGeneration): value.value\ndefine function ToString(value FHIR.DocumentRelationshipType): value.value\ndefine function ToString(value FHIR.VariableType): value.value\ndefine function ToString(value FHIR.TestReportResult): value.value\ndefine function ToString(value FHIR.ConceptMapGroupUnmappedMode): value.value\ndefine function ToDateTime(value FHIR.instant): value.value\ndefine function ToDateTime(value FHIR.dateTime): value.value\ndefine function ToDate(value FHIR.date): value.value\ndefine function ToInteger(value FHIR.positiveInt): value.value\ndefine function ToString(value FHIR.ClinicalImpressionStatus): value.value\ndefine function ToString(value FHIR.EligibilityResponsePurpose): value.value\ndefine function ToString(value FHIR.NarrativeStatus): value.value\ndefine function ToString(value FHIR.ImagingStudyStatus): value.value\ndefine function ToString(value FHIR.EndpointStatus): value.value\ndefine function ToString(value FHIR.BiologicallyDerivedProductCategory): value.value\ndefine function ToString(value FHIR.ResourceVersionPolicy): value.value\ndefine function ToString(value FHIR.ActionCardinalityBehavior): value.value\ndefine function ToString(value FHIR.GroupMeasure): value.value\ndefine function ToString(value FHIR.NamingSystemIdentifierType): value.value\ndefine function ToString(value FHIR.ImmunizationStatusCodes): value.value\ndefine function ToString(value FHIR.MedicationStatusCodes): value.value\ndefine function ToString(value FHIR.DiscriminatorType): value.value\ndefine function ToString(value FHIR.StructureMapInputMode): value.value\ndefine function ToString(value FHIR.LinkageType): value.value\ndefine function ToString(value FHIR.ReferenceHandlingPolicy): value.value\ndefine function ToString(value FHIR.ResearchStudyStatus): value.value\ndefine function ToString(value FHIR.AuditEventOutcome): value.value\ndefine function ToString(value FHIR.SpecimenContainedPreference): value.value\ndefine function ToString(value FHIR.ActionRelationshipType): value.value\ndefine function ToString(value FHIR.ConstraintSeverity): value.value\ndefine function ToString(value FHIR.EventCapabilityMode): value.value\ndefine function ToString(value FHIR.CodeSearchSupport): value.value\ndefine function ToString(value FHIR.ObservationRangeCategory): value.value\ndefine function ToString(value FHIR.UDIEntryType): value.value\ndefine function ToString(value FHIR.DeviceMetricCategory): value.value\ndefine function ToString(value FHIR.TestReportActionResult): value.value\ndefine function ToString(value FHIR.CapabilityStatementKind): value.value\ndefine function ToString(value FHIR.EventTiming): value.value\ndefine function ToString(value FHIR.SearchParamType): value.value\ndefine function ToString(value FHIR.ActionGroupingBehavior): value.value\ndefine function ToString(value FHIR.StructureMapModelMode): value.value\ndefine function ToString(value FHIR.TaskStatus): value.value\ndefine function ToString(value FHIR.BiologicallyDerivedProductStorageScale): value.value\ndefine function ToString(value FHIR.GraphCompartmentRule): value.value\ndefine function ToString(value FHIR.SlicingRules): value.value\ndefine function ToString(value FHIR.ExplanationOfBenefitStatus): value.value\ndefine function ToString(value FHIR.GuideParameterCode): value.value\ndefine function ToString(value FHIR.CatalogEntryRelationType): value.value\ndefine function ToString(value FHIR.LinkType): value.value\ndefine function ToString(value FHIR.ConceptMapEquivalence): value.value\ndefine function ToString(value FHIR.AuditEventAction): value.value\ndefine function ToString(value FHIR.SearchModifierCode): value.value\ndefine function ToString(value FHIR.EventStatus): value.value\ndefine function ToString(value FHIR.OperationParameterUse): value.value\ndefine function ToString(value FHIR.ConsentProvisionType): value.value\ndefine function ToString(value FHIR.ActionConditionKind): value.value\ndefine function ToString(value FHIR.qualityType): value.value\ndefine function ToString(value FHIR.AdministrativeGender): value.value\ndefine function ToString(value FHIR.QuestionnaireItemType): value.value\ndefine function ToString(value FHIR.DeviceMetricCalibrationType): value.value\ndefine function ToString(value FHIR.EvidenceVariableType): value.value\ndefine function ToString(value FHIR.code): value.value\ndefine function ToString(value FHIR.ActionSelectionBehavior): value.value\ndefine function ToString(value FHIR.SupplyDeliveryStatus): value.value\ndefine function ToString(value FHIR.DiagnosticReportStatus): value.value\ndefine function ToString(value FHIR.FlagStatus): value.value\ndefine function ToString(value FHIR.SPDXLicense): value.value\ndefine function ToString(value FHIR.ListStatus): value.value\ndefine function ToString(value FHIR.base64Binary): value.value\ndefine function ToString(value FHIR.DeviceUseStatementStatus): value.value\ndefine function ToString(value FHIR.AuditEventAgentNetworkType): value.value\ndefine function ToString(value FHIR.ExpressionLanguage): value.value\ndefine function ToString(value FHIR.AddressUse): value.value\ndefine function ToString(value FHIR.ContactPointUse): value.value\ndefine function ToString(value FHIR.DeviceMetricOperationalStatus): value.value\ndefine function ToString(value FHIR.ContributorType): value.value\ndefine function ToString(value FHIR.ReferenceVersionRules): value.value\ndefine function ToString(value FHIR.MeasureReportStatus): value.value\ndefine function ToString(value FHIR.SearchEntryMode): value.value\ndefine function ToInteger(value FHIR.unsignedInt): value.value\ndefine function ToString(value FHIR.NameUse): value.value\ndefine function ToString(value FHIR.LocationMode): value.value\ndefine function ToInteger(value FHIR.integer): value.value\ndefine function ToString(value FHIR.FHIRSubstanceStatus): value.value\ndefine function ToString(value FHIR.QuestionnaireItemOperator): value.value\ndefine function ToString(value FHIR.HTTPVerb): value.value\ndefine function ToString(value FHIR.EpisodeOfCareStatus): value.value\ndefine function ToString(value FHIR.RemittanceOutcome): value.value\ndefine function ToString(value FHIR.markdown): value.value\ndefine function ToString(value FHIR.EligibilityRequestPurpose): value.value\ndefine function ToString(value FHIR.QuantityComparator): value.value\ndefine function ToString(value FHIR.MeasureReportType): value.value\ndefine function ToString(value FHIR.ActionPrecheckBehavior): value.value\ndefine function ToString(value FHIR.SampledDataDataType): value.value\ndefine function ToString(value FHIR.CompositionAttestationMode): value.value\ndefine function ToString(value FHIR.TypeRestfulInteraction): value.value\ndefine function ToString(value FHIR.CodeSystemHierarchyMeaning): value.value\ndefine function ToString(value FHIR.vConfidentialityClassification): value.value\ndefine function ToString(value FHIR.ContractResourcePublicationStatusCodes): value.value\ndefine function ToString(value FHIR.VisionBase): value.value\ndefine function ToString(value FHIR.BundleType): value.value\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "version": "4.0.0",
        "name": "FHIRHelpers",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://hl7.org/fhir/codesystem-library-type.html",
              "code": "logic-library"
            }
          ]
        },
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/library-FHIRHelpers-4.0.0"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-MATGlobalCommonFunctions-FHIR4-4.0.000",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-MATGlobalCommonFunctions-FHIR4-4.0.000</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">4.0.000</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>Library/library-FHIRHelpers-4.0.0</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"9\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Location</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Provenance</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>target</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library MATGlobalCommonFunctions_FHIR4 version '4.0.000'\n\nusing FHIR version '4.0.0'\n\ninclude FHIRHelpers version '4.0.0' called FHIRHelpers\n\ncodesystem \"LOINC\": 'http://loinc.org'\ncodesystem \"SNOMEDCT\": 'http://snomed.info/sct/731000124108'\ncodesystem \"RoleCode\": 'http://hl7.org/fhir/v3/RoleCode'\ncodesystem \"Diagnosis Role\": 'http://terminology.hl7.org/CodeSystem/diagnosis-role'\ncodesystem \"RequestIntent\": 'http://terminology.hl7.org/CodeSystem/request-intent'\ncodesystem \"MedicationRequestCategory\": 'http://terminology.hl7.org/CodeSystem/medicationrequest-category'\ncodesystem \"ConditionClinicalStatusCodes\": 'http://terminology.hl7.org/CodeSystem/condition-clinical'\n\nvalueset \"Encounter Inpatient\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307'\nvalueset \"Emergency Department Visit\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292'\nvalueset \"Observation Services\": 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143'\n\ncode \"Birthdate\": '21112-8' from \"LOINC\" display 'Birth date'\ncode \"Dead\": '419099009' from \"SNOMEDCT\" display 'Dead'\ncode \"ER\": 'ER' from \"RoleCode\" display 'Emergency room'\ncode \"ICU\": 'ICU' from \"RoleCode\" display 'Intensive care unit'\ncode \"Billing\": 'billing' from \"Diagnosis Role\" display 'Billing'\n\n// Condition Clinical Status Codes - Consider value sets for these\ncode \"active\": 'active' from \"ConditionClinicalStatusCodes\"\ncode \"recurrence\": 'recurrence' from \"ConditionClinicalStatusCodes\"\ncode \"relapse\": 'relapse' from \"ConditionClinicalStatusCodes\"\ncode \"inactive\": 'inactive' from \"ConditionClinicalStatusCodes\"\ncode \"remission\": 'remission' from \"ConditionClinicalStatusCodes\"\ncode \"resolved\": 'resolved' from \"ConditionClinicalStatusCodes\"\n\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n\ncontext Patient\n\ndefine \"Inpatient Encounter\":\n\t[Encounter: \"Encounter Inpatient\"] EncounterInpatient\n\t\twhere EncounterInpatient.status = 'finished'\n\t\t    and \"LengthInDays\"(EncounterInpatient.period) &lt;= 120\n\t\t\tand EncounterInpatient.period ends during \"Measurement Period\"\n\ndefine function \"ToDate\"(Value DateTime):\n\tDateTime(year from Value, month from Value, day from Value, 0, 0, 0, 0, timezone from Value)\n\ndefine function \"CalendarAgeInDaysAt\"(BirthDateTime DateTime, AsOf DateTime):\n\tdays between ToDate(BirthDateTime)and ToDate(AsOf)\n\ndefine function \"CalendarAgeInDays\"(BirthDateTime DateTime):\n\tCalendarAgeInDaysAt(BirthDateTime, Today())\n\ndefine function \"CalendarAgeInMonthsAt\"(BirthDateTime DateTime, AsOf DateTime):\n\tmonths between ToDate(BirthDateTime)and ToDate(AsOf)\n\ndefine function \"CalendarAgeInMonths\"(BirthDateTime DateTime):\n\tCalendarAgeInMonthsAt(BirthDateTime, Today())\n\ndefine function \"CalendarAgeInYearsAt\"(BirthDateTime DateTime, AsOf DateTime):\n\tyears between ToDate(BirthDateTime)and ToDate(AsOf)\n\ndefine function \"CalendarAgeInYears\"(BirthDateTime DateTime):\n\tCalendarAgeInYearsAt(BirthDateTime, Today())\n\ndefine function \"LengthInDays\"(Value Interval&lt;DateTime&gt;):\n\tdifference in days between start of Value and end of Value\n\ndefine function \"ED Visit\"(TheEncounter FHIR.Encounter):\n    singleton from (\n        [Encounter: \"Emergency Department Visit\"] EDVisit\n            where EDVisit.status = 'finished'\n                and EDVisit.period ends 1 hour or less on or before start of FHIRHelpers.ToInterval(TheEncounter.period)\n    )\n\ndefine function \"Hospitalization\"(TheEncounter FHIR.Encounter):\n\t( \"ED Visit\"(TheEncounter) ) X\n    return\n        if X is null then TheEncounter.period\n        else Interval[start of FHIRHelpers.ToInterval(X.period), end of FHIRHelpers.ToInterval(TheEncounter.period)]\n\ndefine function \"Hospitalization Locations\"(TheEncounter FHIR.Encounter):\n\t( \"ED Visit\"(TheEncounter) ) EDEncounter\n    return\n        if EDEncounter is null then TheEncounter.location\n        else flatten { EDEncounter.location, TheEncounter.location }\n\ndefine function \"Hospitalization Length of Stay\"(TheEncounter FHIR.Encounter):\n\tLengthInDays(\"Hospitalization\"(TheEncounter))\n\ndefine function \"Hospital Admission Time\"(TheEncounter FHIR.Encounter):\n\tstart of \"Hospitalization\"(TheEncounter)\n\ndefine function \"Hospital Discharge Time\"(TheEncounter FHIR.Encounter):\n\tend of FHIRHelpers.ToInterval(TheEncounter.period)\n\ndefine function \"Hospital Arrival Time\"(TheEncounter FHIR.Encounter):\n\tstart of FHIRHelpers.ToInterval(First(\n\t    ( \"Hospitalization Locations\"(TheEncounter) ) HospitalLocation\n\t\t\tsort by start of FHIRHelpers.ToInterval(period)\n\t).period)\n\ndefine function \"HospitalizationWithObservation\"(TheEncounter FHIR.Encounter):\n\tTheEncounter Visit\n\t\tlet ObsVisit: Last([Encounter: \"Observation Services\"] LastObs\n\t\t\t\twhere LastObs.period ends 1 hour or less on or before start of Visit.period\n\t\t\t\tsort by end of period\n\t\t\t),\n\t\t\tVisitStart: Coalesce(start of ObsVisit.period, start of Visit.period),\n\t\t\tEDVisit: Last([Encounter: \"Emergency Department Visit\"] LastED\n\t\t\t\twhere LastED.period ends 1 hour or less on or before VisitStart\n\t\t\t\tsort by end of period\n\t\t\t)\n\t\treturn Interval[Coalesce(start of EDVisit.period, VisitStart), end of Visit.period]\n\ndefine function \"HospitalizationWithObservationLengthofStay\"(Encounter FHIR.Encounter):\n\t\"LengthInDays\"(\"HospitalizationWithObservation\"(Encounter))\n\n// TODO - fix these (must fetch Location resources and compare id to reference)\n/*define function \"Hospital Departure Time\"(TheEncounter FHIR.Encounter):\n\tend of FHIRHelpers.ToInterval(Last(\n\t    ( \"Hospitalization Locations\"(TheEncounter) ) HospitalLocation\n\t\t\tsort by start of FHIRHelpers.ToInterval(period)\n\t).period)\n\ndefine function \"Emergency Department Arrival Time\"(TheEncounter FHIR.Encounter):\n\tstart of FHIRHelpers.ToInterval((\n\t    singleton from (\n\t        ( \"Hospitalization Locations\"(TheEncounter) ) HospitalLocation\n\t\t\t\twhere HospitalLocation.type ~ \"ER\"\n\t\t)\n\t).period)\n\ndefine function \"First Inpatient Intensive Care Unit\"(TheEncounter FHIR.Encounter):\n\tFirst(\n\t    ( TheEncounter.location ) HospitalLocation\n\t\t\twhere HospitalLocation.type ~ \"ICU\"\n\t\t\t\tand HospitalLocation.period during TheEncounter.period\n\t\t\tsort by start of FHIRHelpers.ToInterval(period)\n\t)*/\n\n/*\n*\n*    CQFMeasures Common Logic\n*\n*/\n\ndefine function \"Normalize Onset\"(onset Choice&lt;FHIR.dateTime, FHIR.Age, FHIR.Period, FHIR.Range, FHIR.string&gt;):\n  if onset is FHIR.dateTime then\n\t  Interval[FHIRHelpers.ToDateTime(onset as FHIR.dateTime), FHIRHelpers.ToDateTime(onset as FHIR.dateTime)]\n\telse if onset is FHIR.Period then\n\t  FHIRHelpers.ToInterval(onset as FHIR.Period)\n\telse if onset is FHIR.Age then\n\t  Interval[FHIRHelpers.ToDate(Patient.birthDate) + FHIRHelpers.ToQuantity(onset as FHIR.Age),\n\t\t  FHIRHelpers.ToDate(Patient.birthDate) + FHIRHelpers.ToQuantity(onset as FHIR.Age) + 1 year)\n\telse null\n\ndefine function \"Normalize Abatement\"(condition Condition):\n\tif condition.abatement is FHIR.dateTime then\n\t  Interval[FHIRHelpers.ToDateTime(condition.abatement as FHIR.dateTime), FHIRHelpers.ToDateTime(condition.abatement as FHIR.dateTime)]\n\telse if condition.abatement is FHIR.Period then\n\t  FHIRHelpers.ToInterval(condition.abatement as FHIR.Period)\n\telse if condition.abatement is FHIR.Age then\n\t\tInterval[FHIRHelpers.ToDate(Patient.birthDate) + FHIRHelpers.ToQuantity(condition.abatement as FHIR.Age),\n\t\t\tFHIRHelpers.ToDate(Patient.birthDate) + FHIRHelpers.ToQuantity(condition.abatement as FHIR.Age) + 1 year)\n\telse if condition.abatement is FHIR.boolean then\n\t  Interval[end of \"Normalize Onset\"(condition.onset), condition.recordedDate)\n\telse null\n\ndefine function \"GetPrevalencePeriod\"(condition Condition):\n  Interval[start of \"Normalize Onset\"(condition.onset), end of \"Normalize Abatement\"(condition))\n\n//Measure Review:\n//Global.\"Normalize Interval\" does not work in R4 for a number of resource attributes as it did in STU3.\n//Example: R4 Procedure.performed and Observation.effective no longer have the same Choice types.\ndefine function \"Normalize Interval\"(choice Choice&lt;FHIR.dateTime, FHIR.Period&gt;):\n  if choice is FHIR.dateTime then\n\t  Interval[FHIRHelpers.ToDateTime(choice as FHIR.dateTime), FHIRHelpers.ToDateTime(choice as FHIR.dateTime)]\n\telse\n\t  FHIRHelpers.ToInterval(choice as FHIR.Period)\n\ndefine function \"GetId\"(uri String):\n\tLast(Split(uri, '/'))\n\n\ndefine function \"EncounterDiagnosis\"(Encounter Encounter):\n  Encounter.diagnosis D\n    return singleton from ([Condition] C where C.id = \"GetId\"(D.condition.reference))\n\n// Returns the condition that is specified as the principal diagnosis for the encounter\n// TODO: BTR 2019-07-30: Shouldn't need the FHIRHelpers reference here, investigate\ndefine function \"PrincipalDiagnosis\"(Encounter Encounter):\n\t(singleton from (Encounter.diagnosis D where FHIRHelpers.ToInteger(D.rank) = 1)) PD\n\t\treturn singleton from ([Condition] C where C.id = \"GetId\"(PD.condition.reference))\n\n// Returns the location for the given location reference\ndefine function GetLocation(reference Reference):\n  singleton from (\n    [Location] L where L.id = GetId(reference.reference)\n  )\n\n/*\nNOTE: Extensions are not the preferred approach, but are used as a way to access\ncontent that is defined by extensions but not yet surfaced in the\nCQL model info.\n*/\ndefine function \"GetExtensions\"(domainResource DomainResource, url String):\n  domainResource.extension E\n\t  where E.url = ('http://hl7.org/fhir/us/qicore/StructureDefinition/' + url)\n\t\treturn E\n\ndefine function \"GetExtension\"(domainResource DomainResource, url String):\n  singleton from \"GetExtensions\"(domainResource, url)\n\n/*\nNOTE: Extensions are not the preferred approach, but are used as a way to access\ncontent that is defined by extensions but not yet surfaced in the\nCQL model info.\n*/\ndefine function \"GetBaseExtensions\"(domainResource DomainResource, url String):\n  domainResource.extension E\n\t  where E.url = ('http://hl7.org/fhir/StructureDefinition/' + url)\n\t\treturn E\n\ndefine function \"GetBaseExtension\"(domainResource DomainResource, url String):\n  singleton from \"GetBaseExtensions\"(domainResource, url)\n\n/*\nNOTE: Provenance is not the preferred approach, this is provided only as an illustration\nfor what using Provenance could look like, and is not a tested pattern\n*/\ndefine function \"GetProvenance\"(resource Resource):\n  singleton from ([Provenance: target in resource.id])\n\ndefine function \"GetMedicationCode\"(request MedicationRequest):\n  if request.medication is CodeableConcept then\n\t  request.medication as CodeableConcept\n\telse\n\t  (singleton from ([Medication] M where M.id = GetId((request.medication as Reference).reference))).code\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "version": "4.0.000",
        "name": "MATGlobalCommonFunctions_FHIR4",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://hl7.org/fhir/codesystem-library-type.html",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "Library/library-FHIRHelpers-4.0.0"
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292"
              }
            ]
          },
          {
            "type": "Condition"
          },
          {
            "type": "Condition"
          },
          {
            "type": "Location"
          },
          {
            "type": "Provenance",
            "codeFilter": [
              {
                "path": "target"
              }
            ]
          },
          {
            "type": "Medication"
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/library-MATGlobalCommonFunctions-FHIR4-4.0.000"
      }
    }
  ]
}